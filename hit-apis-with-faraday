FARADAY
-HTTP client library that abstracts and standardizes dome lower-level HTTP functions, aiding in building
 requests and getting responses from API
-Allows maintainence of the same client code even if changed in underlying library later
eg: Faraday Gem
    add to Gemfile and run 'bundle install'

    //searches_controller.rb
    def foursquare
      Faraday.get'https://api.foursqaure.com/v2/venues/search' do |req|
        req.params['client_id'] = client_id
        req.params['client_secret'] = client_secret
        req.params['v'] = '20160201'
        req.params['near'] = params[:zipcode]
        req.params['query'] = 'coffee shop'
      end
      render 'search'
    end

-Faraday.get(url): make 'request' to API endpoint
-params: given from docs or Postman and set
-search: renders a template with result


RESPONSE OBJECT
-Any time a request is made(Faraday.get), returned object is a response
-body: where the server response will be
-status: HTTP code the server returns from request
eg: change and get response into usable variable
    def foursquare
      @resp = Faraday.get'https://api.foursqaure.com/v2/venues/search' do |req|
        req.params['client_id'] = client_id
        req.params['client_secret'] = client_secret
        req.params['v'] = '20160201'
        req.params['near'] = params[:zipcode]
        req.params['query'] = 'coffee shop'
      end
      render 'search'
    end

    -In template view, look into the response body
    <h1>
    <%= some erb tags%>
    <div><%= @resp.body if @resp %></div>


PARSING THE RESPONSE
-Many nodes will be returned as the response result
-Parse with built-in JSON.parse method
eg: searches controller
    @resp Faraday.get'etc'
      //code in here
    end
    body_hash = JSON.parse(@resp.body)
    @venues = body_has['response']['venues']
    render 'search'

-body: parse into a variable called 'body_hash' now a RUby hash
-access 'venues' under 'response' key
