API USER AUTHENTICATION
-Current level of Authentication to APIs is at the application level with Client Id and Secret
-It is important, allowing API provider to ensure good usage by any client app
-App-level auth gives access to app-level functions but this doesn't require a User
-Not enough for user to be logged into (said API service) and use the App, API service needs to know that the
 app is action on BEHALF of a user that the user is ALLOWED to that action
-Asking a user to login to (said API service) on every request is a horrible experience
-Security issues would arise logistically in 2 places, with (said API service) and your app


ENTER OAUTH
-Provides a way for one application to authenticate to another on behalf of User by means of revokable,
 expirable token
-Also provides a staandard way for app to tell API service 'Hey this user says we can do things for them'
 explicitly authorizing the application

OAuth Authentication Flow
  1. Request access from provider site(often via a direct form)
  2. Redirect back to app site with a code
  3. Request token from provider using code


CHECKING AUTHENTICATION
-First check if a user has already authenticated with API Service
-Also consider a User will ultimately be logged in if they have access token stored in their session
eg: create logged_in? method in AppCon
    private
      def logged_in?
        !!session[:token]
      end

-Redirect Users to Request Access
-In OAuth flow, a User will need to be directed to the access site
eg: URL
    https://foursquare.com/oauth2/authenticate
        ?client_id=YOUR_CLIENT_ID
        &response_type=code
        &redirect_uri=YOUR_REGISTERED_REDIRECT_URI

-URL passes redirect_uri param to set up with API Service
-Instead of always typing Client Id and Secret, create a .env file to hold key values and restart server
*DOTENV is a great way to keep configuration variables for development but always add it to .gitignore in
 order to keep it private*

-authenticate_user method will redirect user to the site of https://APISERVICE.fake/oauth2/authenticate if
 the user isn't already logged in
-Also set up before_action to check authentication
eg: AppCon
    before_action :authenticate_user

    private
    def authenticate_user
      client_id = ENV['FOURSQUARE_CLIENT_ID']
      redirect_uri = CGI.escape("http://localhost:3000/auth")
      foursquare_url = "https://foursquare.com/oauth2/authenticate?client_id=#{client_id}&response_type=code&redirect_uri=#{redirect_uri}"
      redirect_to foursquare_url unless logged_in?
    end

    def logged_in?
      !!session[:token]
    end

-Now when Users don't have access token stored in their session, they will be redirected to auth URL


API REDIRECTS BACK TO APP SITE WITH CODE
-When registered app with API service, redirect URL to your localhost server (ie: http://localhost:3000/auth)
-In app code, need to handle the request
eg: routes.rb
    get '/auth'. to: 'sessions#create'


REQUEST TOKEN FROM API SERVICE WITH CODE
-API service redirects users with a code that can be accessed through params, then exchanges for an access
 code with 2nd GET request
-Provide ID, Secret and code recieved
-Use Faraday to send request in controller action
-With success a JSON response will supply an access_token to parse
eg: sessions_controller.rb
    skip_before_action :authenticate_user

    def create
      resp = Faraday.get('https://foursquare.come/oauth2/access_token') do |req|
        req.params['client_id'] = ENV['FOURSQUARE_CLIENT_ID']
        req.params['secret'] = ENV['FOURSQUARE_SECRET']
        req.params['grant_type'] = 'authorization_code'
        req.params['redirect_uri'] = 'http://localhost:3000/auth'
        req.params['code'] = params[:code]
      end
      body = JSON.parse(resp.body)
      session[:token] = body['access_token']
      redirect_to root_path
    end

*skip authenticate_user before_action, when creating session otherwise an infinite loop will arise*


USER ACCESS TOKEN TO ACCESS API
-Users have API tokens, therefore can make calls to all the API endpoints as long as tokens are included
 in request
eg: routes.rb
    get '/friends', to: 'searches#friends'

    -add handling in controller
    def friends
      resp = Faraday.get('https://api.foursquare.com/v2/users/self/firneds') do |req|
        req.params['oauth_token'] = session[:token]
        req.params['v'] = '20160201'
      end
      @friends = JSON.parse(resp.body)['response']['friends']['items']
    end

*may API providers give a way to try API calls right from docs*
