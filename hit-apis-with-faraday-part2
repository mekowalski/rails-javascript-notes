HANDLING ERRORS
-Can't necessarily prevent every possible error because we aren't in control of the API
-Need to understand how to report API errors and handle them
-Response holds the Body where all the data is and the Status, the Status contains the HTTP code
-The Status is the equivalent to the HTTP code of good or bad
eg: 200: OK, 400: ERROR

-A reading of a status will have a Meta node with error information and a Response node either empty or
 filled
-With the information provided, error handling can be made in app
eg: searches_controller.rb
    @resp = Faraday.get('stuff')
      // this code here
    end

    body = JSON.parse(@resp.body)
    if @resp.success?
      @venues = body['response']['venues']
    else
      @error = body['meta']['errorDetail']
    end
    render 'search'

-Could have checked @resp.status = 200 but Faraday provides abstraction of .success? into readable, intent-
 revealing low-level HTTP

-View handling possiblities
eg: search.html.erb
    <div>
    <% if @error %>
      <p><%= @error %></p>
    <% elsif @venues %>
      <ul>
      //code here about venue details

-Using API's error response to display what went wrong
-Not all APIs structure their responses the same way, READ DOCUMENTATION


HANDLING TIMEOUTS
-Out of developer control is the possibility of request timeout across internet servers
-Request timeouts occur for a number of reasons
-rescue Faraday::TimeoutError in controller handles timeouts
-Also force a timeout by setting request's timeout value
eg: searches_controller.rb
    begin
      //code regarding @resp and req.params
      req.options.timeout = 0
      end
      //code regarding the error handling
      end
      rescue Faraday::ConnectionFailed
        @error = 'There was a timeout.  Please try again.'
      end
      render 'search'

-L48: actually not necessary and should be deleted because not every request's timeout should be forced
