PREPROCESSORS
-Because AP parses all asset files, CSS and JS may be written in a language that isn't exactly CSS or JS
-AP recognizes the files aren't normal CSS/JS therefore runs it through a preprocessor which compiles to
 valid CSS/JS
-Development: AP will run preprocessor on any file that needs to be processed every time it's requested
 (which is too slow)
-Running rake asset:precompile  which allows webservers to serve static CSS/JS without ever touching Rails


COFFEESCRIPT
-Coffeescript simplifies JS by abstraction
-What is left is very Ruby-like syntax
eg:
  launch() if ignition is on

  volume = 10 if band isnt SpinalTap

  letTheWildRumpusBegin() unless answer is no

  if car.speed < limit then accelerate()

  winner = yes if pick in [47, 92, 13]

  print inspect "My name is #{@name}"

-Once run through the preprocessor:
var volume, winner;

if (ignition === true) {
  launch();
}

if (band !== SpinalTap) {
  volume = 10;
}

if (answer !== false) {
  letTheWildRumpusBegin();
}

if (car.speed < limit) {
  accelerate();
}

if (pick === 47 || pick === 92 || pick === 13) {
  winner = true;
}

print(inspect("My name is " + this.name));
*plain old JS that i didn't have to write*


SASS
-While CSS isn't as complex as JS, it still has issues
-CSS is difficult to manage without language features such as: selector nesting, inheritance, variables
-SASS: enhanced CSS that once run through preprocessor, turns into plain CSS
-Adds power/elegance to basic language, helping organize large stylesheets(SASS Docs)
-SASS allows use of features that don't exist in CSS such as: variables, nesting, mixins and inheritance
 to name a a few(SASS Docs)
eg: Nesting SASS provided
  .error {
    a {
      color: red;
      text-decoration: none;
    }
    span {
      color: #ff1a1a;
      text-decoration: underline;
    }
  }

-After preprocessor
.error a {
  color: red;
  text-decoration: none;
}

.error span {
  color: #ff1a1a;
  text-decoration: underline;
}
