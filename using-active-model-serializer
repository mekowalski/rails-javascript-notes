-to_json output may return deeply nested data
-Keeping track of nested data in a to_json call may be frustrating and near impossible to maintain


ACTIVEMODEL::SERIALIZER
-ActiveModel::Serializer(AMS): provdes convention-based approach to serializing resources in a Rails way
-By default Rails will use serializer if simply calling 'render json: @object' in controller
-In previous serializer written by hand, explicitly tell Rails what data to return
-AMS will take care of this ^^^ for us
-More importantly, AMS doesn't require building out JSON strings

-RAILS 5 goal is to allow creation of lean, efficient API-only Rails apps.
  -M and C without V
  -Popularity with robust front-end frameworks(React and Angular) Rails needed a strip down to serve as an
   API and AMS
  -Rails moves forward by NOT being tied to View layer


USING AMS
1. Refactor using AMS, adding gem to Gemfile
   eg: gem 'active_model_serializers'
   -bundle install
2. Generate ActiveModel::Serializer for Object
   eg: rails g serializer object
   *if using old code, make sure to delete existing object_serializer.rb before running generator*

   -generated object_serialier.rb file:
    class ObjectSerializer < ActiveModel::Serializer
      attributes :id, :title, :description #to add a couple more attributes
    end
3. Make use of new serializer, remove to_json in controller
   eg: objects_controller.rb
   def show
     @object = Object.find(params[:id])
     render json: @object
   end


RENDERING ASSOCIATION
-AMS is modeled after Rails Models and Controllers
-Rather than build serialization of association into the object, create a new AssociateSerializer
eg:
1. rails g serializer associate
2. Add associate attributes
   eg:
   class AssociateSerializer < ActiveModel::Serializer
     attributes: id, :name
   end
3. Modify associates_controllers#show to handle JSON request
   eg:
   class AssociatesController < ApplicationController
     def show
       @associate = Associate.find(params[:id])
       render json: @associate, status: 200
     end
   end

-How to add Associate name to Object JSON?
-Lean on Rails convention of belongs_to and has_many
eg: ObjectSerializer
    class ObjectSerializer < ActiveModel::Serializer
      attributes :id, :title, :description
      belongs_to :associate
    end

-Render a list of an Associate's objects along with Associates info?
-Still lean on Rails associations
eg: AssociateSerializer
    class AssociateSerializer < ActiveModel::Serializer
      attributes :id, :name
      has_many :objects
    end


RENDERING WITH EXPLICIT SERIALIZERS
-To display an Object's Associate, don't need info being rendered from AssociateSerializer
-If a simple retrieval is needed then a simpler serialization can be made
eg: make new ObjectAssociateSerializer
1. rails g serializer object_associate
2. Add bare minimum of what's needed for Associate to be embedded in an Object
   eg:
   class ObjectAssociateSerializer < ActiveModel::Serializer
     attributes :name
   end
3. Explicitly give a serializer to use rather than rely on convention
   eg:
   class ObjectSerializer < ActiveModel::Serializer
     attributes :id, :title, :description
     belongs_to :associate, serializer: ObjectAssociateSerializer
   end
