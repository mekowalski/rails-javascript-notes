AJAX: the ability to make requests behind the scenes
Jesse James Garret: ajax, new approach web applications
  -Interface should never be locked
  -Users should be able to continue using web site

MANUALLY TRIGGERING AJAX - CLIENT SIDE LOGIC MODEL
[X]Hijack click event
  -manually bind event to the element
  -adding function to the click element to fire AJAX request
  -stop browser from default actions (preventDefault)
  eg: .js file
  $(function() { //this helps load the entire document for the click event to occur
    $('tag.classname').on('event', function(e) {
      alert('you clicked this link')
      e.preventDefault()
    })
  })


[X]Once in click event, fire AJAX request to get DATA
  -fire some AJAX
  -get a response
  -load that response into page HTML
  eg: .js file
  $(function() { //this helps load the entire document for the click event to occur
    $('tag.classname').on('event', function(e) {
      //Just clicked on this link
      //use the HREF attr to as the URL
      $.ajax({
        method: 'GET',
        url: this.href
      })
      .done(function(data) {
        //GET the response

        console.log(data)
        //Want to load that data into the DOM
      })

      alert('you clicked this link')
      e.preventDefault()
    })
  })


WHEN SERVER RESPONDS WITH HTML
[X]Need to place that DATA in the DOM, (add to page)
$(function() {
  $('a.companies-beer').on('click', function(e) {
    $.ajax({
      method: 'GET',
      url: this.href
    })
    .done(function(response) { //callback function after AJAX(L11-16) is fired
      //GET the response
      //Want to load that data into the DOM
      $('div.beers').html(response) //this kind of works: it will sometimes go to a new page for beer show
      //or sometimes will append to the DOM
    })
    e.preventDefault()
    // alert('you clicked this link')
  })
})


[X]Rewrite AJAX in simpler way
-High level abstraction
  $.get(this.href).success(function(response) {
    $('div.beers').html(response)
  })


WHEN SERVER RESPONDS WITH JSON
-Iterate over JSON Data and inject into DOM as pleased
-What i couldn't figure out
$.get(this.href).success(function(json) {
  //i'm not iterating because i'm specifically working with a show, not an index
  //i also am not able to figure this one out so HTML version works well for now
  $('div.beers').append(json)
})


ASK SERVER WHAT WHAT TO DO VIA AJAX - SERVER SIDE AJAX MODEL
  -Bind generic AJAX request for more instructions to click event
  -Have the server render some JS as response
  -Browser(jQuery) will execute JS response
  *Much more complex pattern*
$(function() { //click on link and fire AJAX request to server
  $('a.companies-beer').on('click', function(e) {
    $.ajax({ //server will respond with JavaScript(containing instructions on what to do), not HTML or JSON
      url: this.href,
      dataType: 'script'
    })
    e.preventDefault()
  })
})
