Need one endpoint to make one request and get back structured data representing site

SERIALIZATION
-Controller renders template containing HTML and data needed
-Data is what's neccessary, NOT the formatting
-Serialization: Process which executable code is represented as a string that can be consumed anywhere
-Serializing an object maintains the state(current object values)
-Class definitions tell what any object can look like VS serialized object tells what ONE object does look
 like

-XML: Structured, tag-based markup similar to HTML
eg:
  <post>
    <id>1</id>
    <title>This is a blog post</title>
    <description>Description of the blog post inside this tag</description>
  </post>

-XML is the lingua franca of system communication
-Problem with XML is parsing which is a tedious job
-XML also has potential to inflate size of result dramatically


JSON
-JSON: JavaScript Object Notation: JS to consume data from API and serialize that data for consumption
-Serializing the same object is much more readable and represents data well
eg:
  {
    'id': 1,
    'title': 'This is a blog post',
    'description': 'Description of the blog post inside this tag'
  }

-JSON structure similar to a dictionary with sets of KEY-VALUE pairs
-Simpler to access values via 'dictionary' than traversing the nodes of tag-based doc


OUR OWN JSON SERIALIZER
-Need to return JSON from controller but controller is NOT responsible for serializing objects
-Begin with new class
eg: create post_serializer.rb in app/serializers DIR
    follow in 'diy-json-serializer-ruby-v-000'

-Rails will automatically load any code found in any folders under app/
-Inside post_serializer.rb, need to serialize a Post object(into a JSON string)
eg: post_serializer.rb
    class PostSerializer
      def self.serialize(post)
        # start with the open brace to create a valid JSON object
        serialized_post = '{'

        serialized_post += '"id": ' + post.id.to_s + ', '
        serialized_post += '"title": "' + post.title + '", '
        serialized_post += '"description": "' + post.description + '", '

        # and end with the close brace
        serialized_post += '}'
      end
    end

-Take care of quotations, single-quote strings because JSON requires double-quoted keys and string values

-update #body in posts_controller.rb to use serializer
eg: posts_controller.rb
    def body
      post = Post.find(params[:id])
      render json: PostSerializer.serialize(post)
    end

-Changes to render json: still rendering string but need to communicate that it's properly formatted JSON
-JSONView in chrome helps immensely with reading JSON and validates it, giving errors if there are issues
eg: /posts/4/body
    {
      id: 4,
      title: "A Blog Post By Stephen King",
      description: "This is a blog post by Stephen King. It will probably be a movie soon.",
      author: {
        name: "Stephen King"
      }
    }


CONSUMING JSON FROM API
-Making use of JSON response that comes back after an API request has been made
-Access they keys and values in the app directly inside the function that receives the response
eg: inside function in posts/index.html.erb
