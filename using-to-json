-In previous lesson, Serializer worked will BUT with String concatenation and keeping track of all the single
 and double quotes is a nightmare
-Imagine writing more serializers for more than 4 fields


TO_JSON
-Rails provides to_json method taking, object and converting it TO_JSON!!!
eg: posts_controller.rb
    def post_data
      post = Post.find(params[:id])
      render json: post.to_json
    end

-Updates post body without changing a thing


INCLUDING ASSOCIATIONS
-to_json only updates the main object NOT any associations
-To change this, tell to_json to 'include' associated objects
eg: posts_controller.rb
    def post_data
      post = Post.find(params[:id])
      render json: post.to_json(include: :author)
    end


ONLY RENDER NEEDED DATA
-Raw JSON provides data of object including EVERYTHING
-It's not all neccessary, a good API endpoint should return only the data needed and nothing more
-to_json gives ways to exclude data with 'only' option
eg: posts_controller.rb
    def post_data
      post = Post.find(params[:id])
      render json: post.to_json(only: [:title, description, :id],
        include: [author: {only: [:name]}])
    end

-Can use 'only' on main object and included objects


RESPOND TO REQUESTS WITH DIFFERENT FORMATS
-respond_to can specify what to render depending on if the request is looking for HTMl or JSON
eg: posts_controller.rb
    def show
      @post = Post.find(params[:id])
      respond_to do |f|
        f.html { render :show }
        f.json { render json: @post.to_json(only: [:title, :description, :id],
          include: [author: {only: [:name]}]) }
        end
      end

/posts/:id.html will return HTML format of request
/posts/:id.json will return serialized object in JSON form
