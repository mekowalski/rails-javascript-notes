WORKERS
-Rails Workers: processes that will allow execution tasks outside the main web app thread
-Processing file takes the same thread at the request/response therefore making it time consuming
-File processing becomes a blocking action on thread
-Rails provides many tools to move blocking tasks to a background worker allowing faster response


SIDEKIQ
-Sidekiq: moves lead processing to a background thread, most popular background worker
eg: Add in Gemfile
    gem 'sidekiq'
    bundle install

-Sidekiq relies on a Worker to define and process a job
eg: app/workers/lead_workers.rb *although i don't workers in many of my projects*
    class LeadsWorker
      include SideKiq::Worker

      def perform(leads_file)
      end
    end

-Basic shape of any worker
  -include Sidekiq::Worker
  -define perform


-Take long-running code out of one place and put it inside Perform
eg:
  class LeadsWorker
    require 'csv'
    include Sidekiq::Worker

    def perform(leads_file)
      CSV.foreach(leads_file, headers: true) do |lead|
        Customer.create(email: lead[0], first_name: lead[1], last_name: lead[2])
      end
    end
  end


-Now need to tell controller to run the worker rather than process file inline
eg: controllers/customers_controller.rb
    class CustomersController < ApplicationController
      def upload
        LeadsWorker.perform_async(params[:leads].path)
        redirect_to customers_path
      end
    end

-Sidekiq improves user experience with off-loading long-running tasks into background worker
